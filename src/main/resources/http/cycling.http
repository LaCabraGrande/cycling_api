
### Her fylder vi databasen med cykeldata
GET http://localhost:7070/api/bicycles/populate
Content-Type: application/json

### Her filtrerer vi cykler baseret på udvalgte komponenter
GET http://localhost:7070/api/bicycles/filter?saddleId=3&frameId=4&wheelId=0&gearId=0
Accept: application/json

### Her opretter vi en bruger med en user rolle
POST http://localhost:7070/api/auth/register/
Content-Type: application/json

{
    "username": "user",
    "password": "test123"
}

### Her logger vi ind med brugeren
POST http://localhost:7070/api/auth/login/

{
    "username": "user",
    "password": "test123"
}

> {%
    client.global.set("jwt_token", response.body.token);
    console.log("JWT Token:", client.global.get("jwt_token"));
%}

### Her tilføjer vi en admin rolle til brugeren
POST http://localhost:7070/api/auth/user/addrole/
Accept: application/json
Authorization: Bearer {{jwt_token}}

{
    "role": "admin"
}
Accept: application/json
Authorization: Bearer {{jwt_token}}


// Bicycles API

### Her henter vi alle cykler
GET http://localhost:7070/api/bicycles
Accept: application/json

### Her henter vi en cykel ud fra id på cyklen
GET http://localhost:7070/api/bicycles/3
Accept: application/json

### Her henter vi de cykler som brugeren har oprettet
GET http://localhost:7070/api/bicycles/createdbyuser/admin
Accept: application/json

### Her filtrerer vi cykler baseret på udvalgte komponenter
GET http://localhost:7070/api/bicycles/filter?saddleId=112&frameId=0&wheelId=0&gearId=0
Accept: application/json

### Her henter vi data til Sidebar
GET http://localhost:7070/api/bicycles/filtercounts
Accept: application/json

### Her henter vi de cykler som går ind under de kriterier som brugeren har valgt
GET http://localhost:7070/api/bicycles/filterbicycles?priceInterval=3000-4000&priceInterval=4000-5000&gearSeries=Shimano+Ultegra
//GET http://localhost:7070/api/bicycles/filterbicycles?gearSeries=Shimano Dura-Ace&gearSeries=Shimano Ultegra&priceInterval=3000-4000&priceInterval=4000-5000
//GET http://localhost:7070/api/bicycles/filterbicycles?gearSeries=Shimano Dura-Ace&gearSeries=Shimano Ultegra&minPrice=0&maxPrice=6000&wheelType=Disc&wheelBrand=Syncros&saddleBrand=Syncros
Accept: application/json

### Her henter vi sidebarens data baseret på de valgte kriterier
GET http://localhost:7070/api/bicycles/filtercounts?priceInterval=3000-4000&priceInterval=4000-5000&wheelType=Disc

//GET http://localhost:7070/api/bicycles/filtercounts?priceInterval=3000-4000&gearSeries=Shimano+Ultegra&gearSeries=Shimano+Dura-Ace&gearSeries=Shimano+105&priceInterval=4000-5000
//GET http://localhost:7070/api/bicycles/filtercounts?gearSeries=Shimano+Ultegra&gearSeries=Shimano+Dura-Ace
Accept: application/json

### Her opretter en bruger en cykel
POST http://localhost:7070/api/bicycles
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Cervélo - Test",
  "model": "S5",
  "size": 56,
  "price": 8000,
  "weight": 7.5,
  "description": "Aero road bike",
  "username": "user"
}

### Her opretter vi en cykel og inkluderer ramme, hjul, gear og sadel
POST http://localhost:7070/api/bicycles/withcomponents
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Cervélo",
  "model": "S5",
  "size": 56,
  "price": 8000,
  "weight": 7.5,
  "description": "Aero road bike",
  "username": "user",
  "frameId": 1,
  "gearId": 1,
  "wheelId": 1,
  "saddleId": 1
}

### Her opdaterer vi en cykel med en id på cyklen
PUT http://localhost:7070/api/bicycles/alldetails/30
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Cervélo",
  "model": "S5",
  "size": 56,
  "price": 7000,
  "weight": 7.5,
  "description": "Aero road bike",
  "frameId": 2,
  "gearId": 3,
  "wheelId": 1,
  "saddleId": 1
}

### Her opdaterer vi en cykel ud fra id på cyklen
PUT http://localhost:7070/api/bicycles/6
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Specialized",
  "model": "S-Works Tarmac SL7",
  "size": 56,
  "price": 7600,
  "weight": 6.8,
  "description": "Ultra-lightweight race bike"
}

### Her sletter vi en cykel ud fra id
DELETE http://localhost:7070/api/bicycles/15
Authorization: Bearer {{jwt_token}}

// Frame API

### Her henter vi alle frames
GET http://localhost:7070/api/frames

### Her henter vi en frame ud fra id
GET http://localhost:7070/api/frames/1

### Her henter vi de frames som brugeren har oprettet
GET http://localhost:7070/api/frames/createdbyuser/user
Accept: application/json

### Her opretter en bruger en frame
POST http://localhost:7070/api/frames
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Trek",
  "model": "Madone",
  "material": "Aluminium",
  "type": "Rim",
  "weight": 1500,
  "size": 56,
  "username": "user"
}

### Her tilføjer vi en frame til en cykel og vi bruger cykel id og frame id
POST http://localhost:7070/api/bicycles/16/frame/3
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "bicycleId": 3,
  "frameId": 3
}

### Her opdaterer vi en frame ud fra id
PUT http://localhost:7070/api/frames/4
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Pinarello",
  "model": "Dogma F12",
  "material": "Carbon",
  "type": "Disc",
  "weight": 1150,
  "size": 58
}

### Her sletter vi en frame ud fra id
DELETE http://localhost:7070/api/frames/16
Authorization: Bearer {{jwt_token}}

// Saddles API

### Her henter vi alle saddles
GET http://localhost:7070/api/saddles

### Her henter vi en saddle ud fra id
GET http://localhost:7070/api/saddles/1

### Her henter vi de saddles som brugeren har oprettet
GET http://localhost:7070/api/saddles/createdbyuser/user

### Her opretter en bruger en saddle
POST http://localhost:7070/api/saddles
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Specialized",
  "material": "Carbon",
  "model": "Power",
  "weight": 143,
  "width": 150,
  "username": "user"
}

### Her tilføjer vi en saddle til en cykel og vi bruger cykel id og saddle id
POST http://localhost:7070/api/bicycles/14/saddle/3
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "bicycleId": 14,
  "saddleId": 3
}

### Her opdaterer vi en saddle ud fra id
PUT http://localhost:7070/api/saddles/4
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Specialized",
  "material": "Carbon",
  "model": "S-Works Power",
  "weight": 143,
  "width": 200
}

### Her sletter vi en saddle ud fra id
DELETE http://localhost:7070/api/saddles/3
Authorization: Bearer {{jwt_token}}

// Wheels API

### Her henter vi alle wheels
GET http://localhost:7070/api/wheels

### Her henter vi en wheel ud fra id
GET http://localhost:7070/api/wheels/1

### Her henter vi de wheels som brugeren har oprettet
GET http://localhost:7070/api/wheels/createdbyuser/user

### Her opretter en bruger et wheel
POST http://localhost:7070/api/wheels
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Zipp",
  "material": "Carbon",
  "type": "Disc",
  "model": "303 Firecrest",
  "weight": 1500,
  "size": 25,
  "username": "user"
}

### Her tilføjer vi en wheel til en cykel og vi bruger cykel id og wheel id
POST http://localhost:7070/api/bicycles/11/wheel/9
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "bicycleId": 3,
  "wheelId": 3
}

### Her opdaterer vi en wheel ud fra id
PUT http://localhost:7070/api/wheels/4
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Zipp",
  "material": "Carbon",
  "type": "Rim",
  "model": "303 Firecrest",
  "weight": 1500,
  "size": 25
}

### Her sletter vi en wheel ud fra id
DELETE http://localhost:7070/api/wheels/3
Authorization: Bearer {{jwt_token}}

// Gear API

### Her henter vi alle gears
GET http://localhost:7070/api/gears

### Her henter vi en gear ud fra id
GET http://localhost:7070/api/gears/1

### Her henter vi de gears som brugeren har oprettet
GET http://localhost:7070/api/gears/createdbyuser/user

### Her opretter en bruger et gear
POST http://localhost:7070/api/gears
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Shimano",
  "series": "Shimano 105",
  "model": "Shimano 105 R7100",
  "material": "Aluminium",
  "type": "Mechanical",
  "brakes": "Disc",
  "weight": 3026,
  "username": "user"
}

### Her tilføjer vi en gear til en cykel og vi bruger cykel id og gear id
POST http://localhost:7070/api/bicycles/19/gear/7
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "bicycleId": 3,
  "gearId": 3
}

### Her opdaterer vi en gear ud fra id
PUT http://localhost:7070/api/gears/3
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "brand": "Shimano",
  "model": "Shimano 105 R7100",
  "series": "Shimano 105",
  "material": "Aluminium",
  "type": "Mechanical",
  "brakes": "Disc",
  "weight": 3000
}

### Her sletter vi en gear ud fra id
DELETE http://localhost:7070/api/gears/5
Authorization: Bearer {{jwt_token}}


